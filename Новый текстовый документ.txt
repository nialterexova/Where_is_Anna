#include <string> 
#include<cstring>
#include <sstream>
#pragma once
using namespace std;
class Number
{
protected:
	int num;
public:
	Number();

	~  Number();
};
class decimal:public Number
{
public:
	decimal(string _S);
	decimal(int N) { this->num = N; }
	decimal operator+(const decimal & rv) const {
		return decimal(this->num + rv.num);
	}
	void set_num(int a) { this->num = a; }
	string get_num() {
		stringstream ss;
		ss << num;
		string str = ss.str();
		return str;
	}

};
class hexadecimal: public Number {
public:
	hexadecimal(string _S);
	hexadecimal(int N) { this->num = N; }
	hexadecimal operator+(const hexadecimal & rv) const {
		return hexadecimal(this->num+rv.num);
	}
	string get_num() {
		stringstream ss;
		ss << hex<< num;
		string str = ss.str();
		return str;
	}
};
class binary :public Number {
	binary(string _S);
	binary(int N) { this->num = N; }
	binary operator+(const binary & rv) const {
		return binary(this->num + rv.num);
	}
	string get_num() {
		string str;
		string str1;
		int size = 8;
		int cont = 0;
		if (this->num > 256) {
			int temp = this->num;
			do {
				cont++;
				temp = temp / 2;
			} while (temp >256);
		}
		for (int i = 0; i < (size + cont); i++) {
			int j = this->num % 2;
			this->num = this->num / 2;
			ostringstream oss;
			oss << j;
			str += oss.str();
		}
		for (int i = (str.length() - 1); i>0; i--) {
			str1 += str[i];

		}
		return str1;
	}
};



decimal operator+(const decimal & rv) const {
		int a = this->num + rv.num;
		stringstream ss;
		ss << a;
		string str = ss.str();
		decimal temp(str);
		return temp;
	}